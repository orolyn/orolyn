<?php
namespace Orolyn\Collection;

use Closure;
use Ds\Set;
use Orolyn\IComparer;
use SplObjectStorage;

/**
 * @template T
 * @extends HashSet<T>
 */
class SortedSet extends HashSet
{
    /**
     * @var Closure|null
     */
    private Closure|null $comparer = null;

    /**
     * @var bool
     */
    private bool $dirty = true;

    /**
     * @param iterable $values
     * @param callable|IComparer|null $comparer
     */
    public function __construct(iterable $values = [], callable|IComparer $comparer = null)
    {
        parent::__construct($values);

        if ($comparer) {
            if (!$comparer instanceof IComparer) {
                $this->comparer = Closure::fromCallable($comparer->compare(...));
            } else {
                $this->comparer = Closure::fromCallable($comparer);
            }
        }
    }

    /**
     * @inheritDoc
     */
    public function getIterator(): \Generator
    {
        $this->sort();

        parent::getIterator(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function add(mixed $item): void
    {
        $this->dirty = true;

        parent::add($item); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function copy(): SortedSet
    {
        $this->sort();

        return parent::copy();
    }

    private function sort()
    {
        if ($this->dirty) {
            if ($this->comparer) {
                $this->source->sort($this->comparer->compare(...));
            } else {
                $this->source->sort();
            }

            $this->dirty = false;
        }
    }
}
